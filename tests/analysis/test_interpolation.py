import numpy as np
import unittest

from catana.analysis import interpolation


class MyTestCase(unittest.TestCase):

    def setUp(self):
        # Interpolation functions
        def f_3d(x, y, z):
            return np.cos(0.5 * np.pi * x) * np.sin(0.5 * np.pi * y) * np.sin(0.5 * np.pi * z)
        self.f_3d = f_3d

        # Interpolation grid
        dimensions = (11, 11, 11)
        self.grid = interpolation.build_chebyshev_tensor(dimensions)

        # Evaluation grid
        x_eval = np.linspace(-0.9, 0.9, 5)
        y_eval = np.linspace(-0.9, 0.9, 5)
        z_eval = np.linspace(-0.9, 0.9, 5)
        eval_grid = (x_eval, y_eval, z_eval)

        eval_tensor = np.array(np.meshgrid(*eval_grid))
        self.eval_col = np.array(eval_tensor).T.reshape(-1, eval_tensor.shape[0])

        return

    def test_3d_point_interpolation(self):
        """Test interpolation at a single evaluation point"""
        points, values = interpolation.compute_chebyshev_tensor(self.grid, self.f_3d)
        poly = interpolation.offline_polynomial_tensor(self.grid, values)

        expected_value = 0.15260624135299208
        value = interpolation.interpolate_chebyshev_tensor(poly, self.grid, self.eval_col[0])
        error = np.abs(value - self.f_3d(*self.eval_col[0]))
        expected_error = 1.5804760278292918e-10

        self.assertAlmostEqual(value, expected_value)
        self.assertAlmostEqual(error, expected_error)


    def test_3d_tensor_interpolation(self):
        """Test interpolation across a tensor"""
        points, values = interpolation.compute_chebyshev_tensor(self.grid, self.f_3d)
        poly = interpolation.offline_polynomial_tensor(self.grid, values)

        # Evaluate across a grid of points
        values = np.array([interpolation.interpolate_chebyshev_tensor(poly, self.grid, eval_vector) for eval_vector in self.eval_col])
        values_true = np.array([self.f_3d(*eval_vector) for eval_vector in self.eval_col])
        errors = np.abs(values - values_true)

        expected_values = np.array([1.52606241e-01, 1.00345242e-01, -1.61996924e-24, -1.00345242e-01,
                                    -1.52606241e-01, 7.41797508e-01, 4.87764132e-01, -7.87444275e-24,
                                    -4.87764132e-01, -7.41797508e-01, 9.75528260e-01, 6.41452269e-01,
                                    -1.03555780e-23, -6.41452269e-01, -9.75528260e-01, 7.41797508e-01,
                                    4.87764132e-01, -7.87444304e-24, -4.87764132e-01, -7.41797508e-01,
                                    1.52606241e-01, 1.00345242e-01, -1.61996922e-24, -1.00345242e-01,
                                    -1.52606241e-01, 1.00345242e-01, 6.59813622e-02, -1.06520027e-24,
                                    -6.59813622e-02, -1.00345242e-01, 4.87764132e-01, 3.20726136e-01,
                                    -5.17778895e-24, -3.20726136e-01, -4.87764132e-01, 6.41452269e-01,
                                    4.21782771e-01, -6.80924294e-24, -4.21782771e-01, -6.41452269e-01,
                                    4.87764132e-01, 3.20726136e-01, -5.17778895e-24, -3.20726136e-01,
                                    -4.87764132e-01, 1.00345242e-01, 6.59813622e-02, -1.06520027e-24,
                                    -6.59813622e-02, -1.00345242e-01, -1.61996929e-24, -1.06520027e-24,
                                    4.82679229e-48, 1.06520028e-24, 1.61996930e-24, -7.87444315e-24,
                                    -5.17778890e-24, 1.90444176e-46, 5.17778906e-24, 7.87444324e-24,
                                    -1.03555780e-23, -6.80924279e-24, 1.33179767e-46, 6.80924284e-24,
                                    1.03555780e-23, -7.87444315e-24, -5.17778903e-24, 2.56387559e-46,
                                    5.17778904e-24, 7.87444324e-24, -1.61996929e-24, -1.06520026e-24,
                                    2.00924380e-47, 1.06520027e-24, 1.61996928e-24, -1.00345242e-01,
                                    -6.59813622e-02, 1.06520028e-24, 6.59813622e-02, 1.00345242e-01,
                                    -4.87764132e-01, -3.20726136e-01, 5.17778912e-24, 3.20726136e-01,
                                    4.87764132e-01, -6.41452269e-01, -4.21782771e-01, 6.80924294e-24,
                                    4.21782771e-01, 6.41452269e-01, -4.87764132e-01, -3.20726136e-01,
                                    5.17778905e-24, 3.20726136e-01, 4.87764132e-01, -1.00345242e-01,
                                    -6.59813622e-02, 1.06520030e-24, 6.59813622e-02, 1.00345242e-01,
                                    -1.52606241e-01, -1.00345242e-01, 1.61996926e-24, 1.00345242e-01,
                                    1.52606241e-01, -7.41797508e-01, -4.87764132e-01, 7.87444325e-24,
                                    4.87764132e-01, 7.41797508e-01, -9.75528260e-01, -6.41452269e-01,
                                    1.03555780e-23, 6.41452269e-01, 9.75528260e-01, -7.41797508e-01,
                                    -4.87764132e-01, 7.87444295e-24, 4.87764132e-01, 7.41797508e-01,
                                    -1.52606241e-01, -1.00345242e-01, 1.61996925e-24, 1.00345242e-01,
                                    1.52606241e-01])
        expected_errors = np.array([1.58047603e-10, 4.93525512e-10, 1.61996924e-24, 4.93525484e-10,
                                    1.58047603e-10, 1.05207654e-09, 2.58558835e-09, 7.87444275e-24,
                                    2.58558808e-09, 1.05207643e-09, 1.61633973e-09, 3.55332852e-09,
                                    1.03555780e-23, 3.55332830e-09, 1.61633973e-09, 1.05207654e-09,
                                    2.58558830e-09, 7.87444304e-24, 2.58558802e-09, 1.05207620e-09,
                                    1.58047520e-10, 4.93525484e-10, 1.61996922e-24, 4.93525429e-10,
                                    1.58047520e-10, 4.93525540e-10, 5.80695006e-10, 1.06520027e-24,
                                    5.80694978e-10, 4.93525568e-10, 2.58558841e-09, 2.94539421e-09,
                                    5.17778895e-24, 2.94539410e-09, 2.58558841e-09, 3.55332852e-09,
                                    3.97408978e-09, 6.80924294e-24, 3.97408978e-09, 3.55332863e-09,
                                    2.58558813e-09, 2.94539426e-09, 5.17778895e-24, 2.94539398e-09,
                                    2.58558824e-09, 4.93525457e-10, 5.80695006e-10, 1.06520027e-24,
                                    5.80694937e-10, 4.93525512e-10, 1.61996929e-24, 1.06520027e-24,
                                    4.82679229e-48, 1.06520028e-24, 1.61996930e-24, 7.87444315e-24,
                                    5.17778890e-24, 1.90444176e-46, 5.17778906e-24, 7.87444324e-24,
                                    1.03555780e-23, 6.80924279e-24, 1.33179767e-46, 6.80924284e-24,
                                    1.03555780e-23, 7.87444315e-24, 5.17778903e-24, 2.56387559e-46,
                                    5.17778904e-24, 7.87444324e-24, 1.61996929e-24, 1.06520026e-24,
                                    2.00924380e-47, 1.06520027e-24, 1.61996928e-24, 4.93525512e-10,
                                    5.80694978e-10, 1.06520028e-24, 5.80694978e-10, 4.93525512e-10,
                                    2.58558808e-09, 2.94539421e-09, 5.17778912e-24, 2.94539410e-09,
                                    2.58558808e-09, 3.55332841e-09, 3.97408972e-09, 6.80924294e-24,
                                    3.97408967e-09, 3.55332841e-09, 2.58558813e-09, 2.94539398e-09,
                                    5.17778905e-24, 2.94539393e-09, 2.58558802e-09, 4.93525415e-10,
                                    5.80694950e-10, 1.06520030e-24, 5.80694923e-10, 4.93525457e-10,
                                    1.58047658e-10, 4.93525568e-10, 1.61996926e-24, 4.93525498e-10,
                                    1.58047686e-10, 1.05207654e-09, 2.58558841e-09, 7.87444325e-24,
                                    2.58558830e-09, 1.05207643e-09, 1.61633995e-09, 3.55332852e-09,
                                    1.03555780e-23, 3.55332841e-09, 1.61633995e-09, 1.05207654e-09,
                                    2.58558841e-09, 7.87444295e-24, 2.58558813e-09, 1.05207631e-09,
                                    1.58047547e-10, 4.93525498e-10, 1.61996925e-24, 4.93525429e-10,
                                    1.58047603e-10])

        np.testing.assert_allclose(values, expected_values)
        np.testing.assert_allclose(errors, expected_errors)


if __name__ == '__main__':
    unittest.main()
